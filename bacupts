  /* this.log('Switch on Profile',process.cwd());
        this.log('path',path.dirname)
        this.log(path.resolve(__dirname)); */
       /*   fs.readFile(process.cwd() + '/metadata/teste.xml', 'utf8' , (err, data) => {
          if (err) {
            this.log('',err);
            return;
          }
          this.log('data',data);
        }) */


          /* const name = flags.name ?? 'world'
    this.log(`hello ${name} from ./src/commands/hello.ts`)
    if (args.file && flags.force) {
      this.log(`you input --force and --file: ${args.file}`)
    } */
  }


  /*   async getFilesInDir(folder: string){
    const fullPath = process.cwd() +  '/' + folder;
    let mapOfFiles = new Map();

    fs.readdir(fullPath, (err, files) => {
      files.forEach(file => {
        this.log(file);
        mapOfFiles.set(file,file);
      });
    });
    this.log('map', mapOfFiles);
    return Promise.resolve(mapOfFiles);
     return new Promise(resolve => {
      fs.readdir(fullPath, (err, files) => {
        files.forEach(file => {
          mapOfFiles.set(file,file);
        });
      });
  
      resolve(mapOfFiles);

      
    });
  } 

  } */



  mergeProfiles(fileName: string, target: any, source: any) {
    let profileSource = this.convertXmlToObject(source);
    let profileTarget = this.convertXmlToObject(target);
    console.log(profileSource['fieldPermissions'])
    console.log('----------------------------------------------------')
    console.log(profileTarget['fieldPermissions'])
    for (let key of Object.entries(profileSource['fieldPermissions'])) {
      /*       console.log(key.keys());
       */      /* key.forEach(element => {
               console.log
           }); */
    };

    console.log



    /*  const { userPermissionsTarget,fieldPermissionsTarget } = JSON.parse(JSON.stringify(mapTarget.get('Profile'))); */
    /*  console.log(fieldPermissions); */
    /*  const { userPermissions } = teste; */

    /*  Object.entries(sourceXml).forEach(element => {
     /*   console.log(element.keys())
       console.log(element.entries()) */

    /*  for(let x of element.entries()){
       this.log('',typeof x);
       this.log('',x);
     } */

    /*     }); */


  }




  convertXmlToObject(file: any) {
    let parser = new xml2js.Parser();
    let data = new Object();
    parser.parseString(file, function (err: any, result: any) {
      if (!err) {
        data = result;
      } else {
        console.log(err);
      }
    });
    var sourceXml = JSON.parse(JSON.stringify(data));
    const mapSource = new Map(Object.entries(sourceXml));
    var { userPermissions, fieldPermissions, classAccesses, layoutAssignments,
      applicationVisibilities, objectPermissions, recordTypeVisibilities, tabVisibilities } = JSON.parse(JSON.stringify(mapSource.get('Profile')));

    var profile = {
      userPermissions: userPermissions,
      fieldPermissions: fieldPermissions,
      classAccesses: classAccesses,
      layoutAssignments: layoutAssignments,
      applicationVisibilities: applicationVisibilities,
      objectPermissions: objectPermissions,
      recordTypeVisibilities: recordTypeVisibilities,
      tabVisibilities: tabVisibilities
    }

    return profile;
/*     return objectRetorno;
 */  }